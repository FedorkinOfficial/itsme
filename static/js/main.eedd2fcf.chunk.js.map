{"version":3,"sources":["components/Header/Header.module.css","components/Login/Login.module.css","components/Register/Register.module.css","reducers/registerReduce.js","reducers/loginReducer.js","redux/redux-store.js","components/Header/Header.jsx","components/Header/Header.Conatainer.jsx","components/Login/Login.jsx","components/Login/Login.Container.jsx","components/Register/Register.jsx","components/Register/Register.Container.jsx","App.js","ContainerApp.jsx","serviceWorker.js","index.js"],"names":["module","exports","initialState","changedName","changedPass","status","reason","reducers","combineReducers","register","state","action","type","login","store","createStore","window","Header","className","classes","header_wrap","header_menu","to","forms_wrap","React","Component","HeaderAPI","axios","get","withCredentials","then","response","console","log","this","props","HeaderContainer","connect","Login","refName","createRef","refPass","forms","onChange","changeName","current","value","ref","changePass","onClick","checkApi","check","LoginAPI","formData","FormData","append","fetch","method","body","json","changeNameAC","changePassAC","LoginContainer","Register","postApi","RegisterAPI","clickRegisterAC","clickRegister","RegisterContainer","App","path","render","ContainerApp","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,YAAc,4BAA4B,YAAc,4BAA4B,WAAa,6B,mBCAnHD,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,MAAQ,0B,yKCKtBC,EAAe,CACfC,YAAa,GACbC,YAAa,GACbC,QAAQ,EACRC,OAAQ,ICPRJ,EAAe,CACfC,YAAa,GACbC,YAAa,ICAbG,EAAWC,YAAgB,CAC3BC,SFQwB,WAAmC,IAAlCC,EAAiC,uDAAzBR,EAAcS,EAAW,uCAC1D,OAAOA,EAAOC,MACV,IAhBY,cAiBR,OAAO,2BACAF,GADP,IAEIP,YAAaQ,EAAOR,cAG5B,IArBY,cAsBR,OAAO,2BACAO,GADP,IAEIN,YAAaO,EAAOP,cAG5B,IA1Be,iBA2BX,OAAO,2BACAM,GADP,IAEIP,YAAa,GACbC,YAAa,GACbC,QAAQ,EACRC,OAAQK,EAAOL,SAGvB,QACI,sBACOI,KEhCfG,MDCsB,WAAmC,IAAlCH,EAAiC,uDAAzBR,EAAcS,EAAW,uCACxD,OAAOA,EAAOC,MACV,IAVY,cAWR,OAAO,2BACAF,GADP,IAEIP,YAAaQ,EAAOR,cAG5B,IAfY,cAgBR,OAAO,2BACAO,GADP,IAEIN,YAAaO,EAAOP,cAG5B,QACI,sBACOM,OCdfI,EAAQC,YAAYR,GACxBS,OAAOF,MAAQA,EACAA,Q,sFCeAG,E,uKApBP,OACI,yBAAKC,UAAWC,IAAQC,aACpB,yBAAKF,UAAWC,IAAQE,aACpB,4BACI,4BAAI,kBAAC,IAAD,CAASC,GAAG,cAAZ,eACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,cACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,SAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,gBAAZ,gBACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,cAAZ,cAGZ,yBAAKJ,UAAWC,IAAQI,YACpB,kBAAC,IAAD,CAASD,GAAG,UAAZ,UACA,kBAAC,IAAD,CAASA,GAAG,aAAZ,kB,GAfCE,IAAMC,W,iBCErBC,E,kLAEEC,IAAMC,IAAI,wBAAyB,CAACC,iBAAiB,IAAOC,MAAK,SAASC,GACtEC,QAAQC,IAAIF,Q,+BAKhB,OACI,kBAAC,EAAD,CAAQrB,MAAOwB,KAAKC,MAAMzB,Y,GATdc,IAAMC,WAqBfW,EADSC,aANF,SAAC3B,GACnB,MAAO,CACHA,MAAOA,KAIkC,GAAzB2B,CAA6BX,G,iBCEtCY,EAzBH,SAACH,GACT,IAAII,EAAUf,IAAMgB,YAChBC,EAAUjB,IAAMgB,YAapB,OACI,yBAAKtB,UAAWC,IAAQuB,OACpB,2BAAO9B,KAAK,OAAO+B,SAdV,WACbR,EAAMS,WAAWL,EAAQM,QAAQC,QAaYA,MAAOX,EAAMzB,MAAMD,SAASN,YAAa4C,IAAKR,IACvF,2BAAO3B,KAAK,OAAO+B,SAZV,WACbR,EAAMa,WAAWP,EAAQI,QAAQC,QAWYA,MAAOX,EAAMzB,MAAMD,SAASL,YAAa2C,IAAKN,IACvF,4BAAQQ,QAVD,WACXd,EAAMe,aASF,SACA,4BAAQD,QARJ,WACRd,EAAMgB,UAOF,SClBNC,E,4MACFF,SAAW,WACP,IAAIG,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQ,EAAKpB,MAAMzB,MAAMG,MAAMV,aAC/CkD,EAASE,OAAO,OAAQ,EAAKpB,MAAMzB,MAAMG,MAAMT,aAC/CoD,MAAM,wBAAyB,CAACC,OAAQ,OAAQC,KAAML,GAAW,CAACxB,iBAAiB,IAAOC,MAAK,SAASC,GAEhG,OADAC,QAAQC,IAAIF,GACLA,EAAS4B,UACjB7B,MAAK,SAAS4B,GACb1B,QAAQC,IAAIyB,O,EAKxBP,MAAQ,WACJxB,IAAMC,IAAI,wBAAyB,CAACC,iBAAiB,IAAOC,MAAK,SAASC,GACtEC,QAAQC,IAAIF,O,uDAKhB,OACI,kBAAC,EAAD,CAAOrB,MAAOwB,KAAKC,MAAMzB,MAClBkC,WAAYV,KAAKC,MAAMyB,aACvBZ,WAAYd,KAAKC,MAAM0B,aACvBX,SAAUhB,KAAKgB,SACfC,MAAOjB,KAAKiB,Y,GA1BR3B,IAAMC,WAuCdqC,EADQzB,aAND,SAAC3B,GACnB,MAAO,CACHA,MAAOA,KAIiC,CAACkD,aLdrB,SAACzD,GAAD,MAAkB,CAACS,KA9B3B,cA8B8CT,gBKcH0D,aLbnC,SAACzD,GAAD,MAAkB,CAACQ,KA9B3B,cA8B8CR,iBKa3CiC,CAAuDe,G,iBCT/DW,EA/BA,SAAC5B,GAEZ,GAAGA,EAAMzB,MAAMD,SAASJ,OACpB,OACI,6BACK8B,EAAMzB,MAAMD,SAASH,QAI9B,IAAIiC,EAAUf,IAAMgB,YAChBC,EAAUjB,IAAMgB,YAUpB,OACI,yBAAKtB,UAAWC,IAAQuB,OACpB,2BAAO9B,KAAK,OAAO+B,SAXV,WACbR,EAAMS,WAAWL,EAAQM,QAAQC,QAUYA,MAAOX,EAAMzB,MAAMD,SAASN,YAAa4C,IAAKR,IACvF,2BAAO3B,KAAK,OAAO+B,SATV,WACbR,EAAMa,WAAWP,EAAQI,QAAQC,QAQYA,MAAOX,EAAMzB,MAAMD,SAASL,YAAa2C,IAAKN,IACvF,4BAAQQ,QAPI,WAChBd,EAAM6B,YAMF,cCvBVC,E,4MACFD,QAAU,WACF,IACIX,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQ,EAAKpB,MAAMzB,MAAMD,SAASN,aAClDkD,EAASE,OAAO,OAAQ,EAAKpB,MAAMzB,MAAMD,SAASL,aAClDoD,MAAM,wBAAyB,CAACC,OAAQ,OAAQC,KAAML,IAAWvB,MAAK,SAASC,GACvE,OAAOA,EAAS4B,UACjB7B,MAAK,SAAS4B,GACb1B,QAAQC,IAAIyB,GAPA,SAACpD,GAAW,EAAK6B,MAAM+B,gBAAgB5D,GASnD6D,CADaT,EAAKpD,Y,uDAM9B,OACI,kBAAC,EAAD,CACYI,MAAOwB,KAAKC,MAAMzB,MACpBkC,WAAYV,KAAKC,MAAMyB,aACvBZ,WAAYd,KAAKC,MAAM0B,aACvBG,QAAS9B,KAAK8B,c,GArBVxC,IAAMC,WAmCjB2C,EADW/B,aANJ,SAAC3B,GACnB,MAAO,CACHA,MAAOA,KAIoC,CAACkD,aRMxB,SAACzD,GAAD,MAAkB,CAACS,KA7C3B,cA6C8CT,gBQNA0D,aROtC,SAACzD,GAAD,MAAkB,CAACQ,KA7C3B,cA6C8CR,gBQPc8D,gBRQjD,SAAC5D,GAAD,MAAa,CAACM,KA7CtB,iBA6C4CN,YQRzC+B,CAAwE4B,GCbnFI,MAlBf,SAAalC,GACX,OACE,kBAAC,IAAD,KACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,OACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAOoD,KAAM,eACb,kBAAC,IAAD,CAAOA,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,YAAaC,OAAQ,kBAAM,kBAAC,EAAD,SACxC,kBAAC,IAAD,CAAOD,KAAM,mBCRRE,EAFMnC,aANC,SAAC3B,GACnB,MAAO,CACHA,MAAOA,KAIM2B,CAA0BgC,GCG3BI,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCTNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,CAAUhE,MAAOA,GACf,kBAAC,EAAD,QAGJiE,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.eedd2fcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header_wrap\":\"Header_header_wrap__2_07y\",\"header_menu\":\"Header_header_menu__373iT\",\"forms_wrap\":\"Header_forms_wrap__1Gzig\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forms\":\"Login_forms__XT70k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forms\":\"Register_forms__7jrs_\"};","const CHANGE_NAME = 'CHANGE_NAME';\r\nconst CHANGE_PASS = 'CHANGE_PASS';\r\nconst CLICK_REGISTER = 'CLICK_REGISTER';\r\n\r\n\r\n\r\nlet initialState = {\r\n    changedName: '',\r\n    changedPass: '',\r\n    status: false,\r\n    reason: ''\r\n}\r\n\r\n\r\nexport let registerReduce = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case CHANGE_NAME:{\r\n            return {\r\n                ...state,\r\n                changedName: action.changedName\r\n            }    \r\n        }\r\n        case CHANGE_PASS:{\r\n            return {\r\n                ...state,\r\n                changedPass: action.changedPass\r\n            }    \r\n        }\r\n        case CLICK_REGISTER:{\r\n            return {\r\n                ...state,\r\n                changedName: '',\r\n                changedPass: '',\r\n                status: true,\r\n                reason: action.reason\r\n            }    \r\n        }\r\n        default:{\r\n            return{\r\n                ...state\r\n            } \r\n        }\r\n    }\r\n}\r\n\r\nexport const changeNameAC = (changedName) => ({type: CHANGE_NAME, changedName});\r\nexport const changePassAC = (changedPass) => ({type: CHANGE_PASS, changedPass});\r\nexport const clickRegisterAC = (reason) => ({type: CLICK_REGISTER, reason});","const CHANGE_NAME = 'CHANGE_NAME';\r\nconst CHANGE_PASS = 'CHANGE_PASS';\r\n\r\nlet initialState = {\r\n    changedName: '',\r\n    changedPass: ''\r\n}\r\n\r\nexport let loginReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case CHANGE_NAME:{\r\n            return {\r\n                ...state,\r\n                changedName: action.changedName\r\n            }    \r\n        }\r\n        case CHANGE_PASS:{\r\n            return {\r\n                ...state,\r\n                changedPass: action.changedPass\r\n            }    \r\n        }\r\n        default:{\r\n            return{\r\n                ...state\r\n            } \r\n        }\r\n    }\r\n}\r\n\r\nexport const changeNameAC = (changedName) => ({type: CHANGE_NAME, changedName});\r\nexport const changePassAC = (changedPass) => ({type: CHANGE_PASS, changedPass});","import {combineReducers, createStore} from 'redux';\r\nimport {registerReduce} from '../reducers/registerReduce';\r\nimport {loginReducer} from '../reducers/loginReducer';\r\n\r\n\r\nlet reducers = combineReducers({\r\n    register: registerReduce,\r\n    login: loginReducer\r\n})\r\n\r\nlet store = createStore(reducers);\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\r\nimport classes from './Header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nclass Header extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className={classes.header_wrap}>\r\n                <div className={classes.header_menu}>\r\n                    <ul>\r\n                        <li><NavLink to='/mycompany'>My company</NavLink></li>\r\n                        <li><NavLink to='/vacancies'>Vacancies</NavLink></li>\r\n                        <li><NavLink to='/bank'>Bank</NavLink></li>\r\n                        <li><NavLink to='/marketplace'>Marketplace</NavLink></li>\r\n                        <li><NavLink to='/myprofile'>Profile</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n                <div className={classes.forms_wrap}>\r\n                    <NavLink to='/login'>log In</NavLink>\r\n                    <NavLink to='/register'>Register</NavLink>\r\n                </div>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Header from './Header';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass HeaderAPI extends React.Component{\r\n    componentDidMount(){\r\n        axios.get('http://itsmeapi/users', {withCredentials: true}).then(function(response) {\r\n            console.log(response);\r\n        })\r\n    }\r\n \r\n    render(){\r\n        return(\r\n            <Header state={this.props.state}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state\r\n    }\r\n}\r\n\r\nconst HeaderContainer = connect(mapStateToProps, {})(HeaderAPI);\r\nexport default HeaderContainer;","import React from 'react';\r\nimport classes from './Login.module.css';\r\n\r\n\r\nlet Login = (props) => {\r\n    let refName = React.createRef();\r\n    let refPass = React.createRef();\r\n    let changeName = () => {\r\n        props.changeName(refName.current.value);\r\n    }\r\n    let changePass = () => {\r\n        props.changePass(refPass.current.value);\r\n    }\r\n    let checkApi = () => {\r\n        props.checkApi()\r\n    }\r\n    let check = () => {\r\n        props.check()\r\n    }\r\n    return(\r\n        <div className={classes.forms}>\r\n            <input type=\"text\" onChange={changeName} value={props.state.register.changedName} ref={refName}/>\r\n            <input type=\"text\" onChange={changePass} value={props.state.register.changedPass} ref={refPass}/>\r\n            <button onClick={checkApi}>Login</button>\r\n            <button onClick={check}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Login from './Login';\r\nimport {changeNameAC, changePassAC} from '../../reducers/loginReducer';\r\nimport axios from 'axios';\r\n\r\nclass LoginAPI extends React.Component{\r\n    checkApi = () => {\r\n        let formData = new FormData();\r\n        formData.append('name', this.props.state.login.changedName);\r\n        formData.append('pass', this.props.state.login.changedPass);\r\n        fetch(`http://itsmeapi/login`, {method: 'POST', body: formData}, {withCredentials: true}).then(function(response) {\r\n                console.log(response);\r\n                return response.json();\r\n            }).then(function(body) { \r\n                console.log(body);\r\n                // let reason = body.reason; \r\n                // clickRegister();                                \r\n            });   \r\n    }\r\n    check = () => {\r\n        axios.get('http://itsmeapi/users', {withCredentials: true}).then(function(response) {\r\n            console.log(response);\r\n        })\r\n    }\r\n   \r\n    render(){\r\n        return(\r\n            <Login state={this.props.state}\r\n                   changeName={this.props.changeNameAC}\r\n                   changePass={this.props.changePassAC}\r\n                   checkApi={this.checkApi}\r\n                   check={this.check}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state\r\n    }\r\n}\r\n\r\nconst LoginContainer = connect(mapStateToProps, {changeNameAC, changePassAC})(LoginAPI);\r\nexport default LoginContainer;","import React from 'react';\r\nimport classes from './Register.module.css';\r\n\r\n\r\nlet Register = (props) => {\r\n    \r\n    if(props.state.register.status){\r\n        return(\r\n            <div>\r\n                {props.state.register.reason}\r\n            </div>\r\n        )\r\n    } else {\r\n        let refName = React.createRef();\r\n        let refPass = React.createRef();\r\n        let changeName = () => {\r\n            props.changeName(refName.current.value);\r\n        }\r\n        let changePass = () => {\r\n            props.changePass(refPass.current.value);\r\n        }\r\n        let clickRegister = () => {\r\n            props.postApi();\r\n        }\r\n        return(\r\n            <div className={classes.forms}>\r\n                <input type=\"text\" onChange={changeName} value={props.state.register.changedName} ref={refName}/>\r\n                <input type=\"text\" onChange={changePass} value={props.state.register.changedPass} ref={refPass}/>\r\n                <button onClick={clickRegister}>Register</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Register from './Register';\r\nimport {changeNameAC, changePassAC, clickRegisterAC} from '../../reducers/registerReduce';\r\n\r\nclass RegisterAPI extends React.Component{\r\n    postApi = () => {\r\n            let clickRegister = (reason) => this.props.clickRegisterAC(reason);  \r\n            let formData = new FormData();\r\n            formData.append('name', this.props.state.register.changedName);\r\n            formData.append('pass', this.props.state.register.changedPass);\r\n            fetch(`http://itsmeapi/users`, {method: 'POST', body: formData}).then(function(response) {\r\n                    return response.json()\r\n                }).then(function(body) { \r\n                    console.log(body);\r\n                    let reason = body.reason; \r\n                    clickRegister(reason);                                \r\n                });   \r\n    }           \r\n\r\n    render(){\r\n        return(\r\n            <Register \r\n                        state={this.props.state}\r\n                      changeName={this.props.changeNameAC}\r\n                      changePass={this.props.changePassAC}\r\n                      postApi={this.postApi}\r\n                      \r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state\r\n    }\r\n}\r\n\r\nconst RegisterContainer = connect(mapStateToProps, {changeNameAC, changePassAC, clickRegisterAC})(RegisterAPI);\r\nexport default RegisterContainer;","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport HeaderContainer from './components/Header/Header.Conatainer';\nimport LoginContainer from './components/Login/Login.Container';\nimport RegisterContainer from './components/Register/Register.Container'\n\n\nfunction App(props) {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <div className=\"App\">\n        <HeaderContainer />\n        </div>\n        <div className=\"main_body\">\n          <Route path={'/mycompany'}/>\n          <Route path={'/login'} render={() => <LoginContainer />}/>\n          <Route path={'/register'} render={() => <RegisterContainer />}/>\n          <Route path={'/myprofile'}/>\n        </div>\n      </div>    \n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import App from './App';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state\r\n    }\r\n}\r\n\r\nconst ContainerApp = connect(mapStateToProps) (App);\r\n\r\nexport default ContainerApp;   ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/redux-store';\nimport './index.css';\nimport ContainerApp from './ContainerApp';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ContainerApp/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}